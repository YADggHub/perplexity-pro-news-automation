#!/usr/bin/env python3
"""
Perplexity Pro News Automation System
=====================================

–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Perplexity Pro.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª –æ—Ç —Å–±–æ—Ä–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –¥–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram –∫–∞–Ω–∞–ª—ã.

–ê–≤—Ç–æ—Ä: News Automation Team
–í–µ—Ä—Å–∏—è: 1.0.0
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

import asyncio
import logging
import os
import signal
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent.parent))

from src.config import Config, load_config
from src.automation import PerplexityAutomation
from src.scheduler import NewsScheduler
from src.telegram_publisher import TelegramPublisher
from src.database import DatabaseManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    log_dir = Path("logs")
    log_dir.mkdir(exist_ok=True)

    log_format = "%(asctime)s - %(name)s - %(levelname)s - %(message)s"

    # –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä
    logging.basicConfig(
        level=getattr(logging, Config.LOG_LEVEL.upper()),
        format=log_format,
        handlers=[
            logging.FileHandler(log_dir / "perplexity_news.log"),
            logging.StreamHandler(sys.stdout)
        ]
    )

    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    loggers = {
        'selenium': logging.WARNING,
        'urllib3': logging.WARNING,
        'telegram': logging.INFO,
        'asyncio': logging.WARNING
    }

    for logger_name, level in loggers.items():
        logging.getLogger(logger_name).setLevel(level)

class NewsAutomationSystem:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""

    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.db = DatabaseManager(Config.DATABASE_PATH)
        self.automation = PerplexityAutomation(Config.get_perplexity_credentials())
        self.telegram = TelegramPublisher(Config.get_telegram_config())
        self.scheduler = NewsScheduler(self, Config.get_schedule_config())

        self.running = False
        self.stats = {
            'queries_today': 0,
            'posts_created_today': 0,
            'posts_published_today': 0,
            'errors_today': 0,
            'start_time': datetime.now()
        }

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)

        self.logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"üì° –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        self.running = False

    async def health_check(self) -> Dict[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        health_status = {
            'database': False,
            'perplexity': False,
            'telegram': False,
            'browser': False
        }

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db.get_daily_stats(datetime.now().date())
            health_status['database'] = True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ë–î: {e}")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Perplexity (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞)
            if await self.automation.check_session():
                health_status['perplexity'] = True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Perplexity: {e}")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram
            if await self.telegram.check_connection():
                health_status['telegram'] = True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞
            if await self.automation.check_browser():
                health_status['browser'] = True
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")

        overall_health = all(health_status.values())
        status_emoji = "‚úÖ" if overall_health else "‚ö†Ô∏è"

        self.logger.info(f"{status_emoji} –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: {health_status}")
        return health_status

    async def create_news_post_from_query(self, query: str) -> Optional['NewsPost']:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∫ Perplexity"""

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
            if self.stats['queries_today'] >= Config.MAX_DAILY_QUERIES:
                self.logger.warning(f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {Config.MAX_DAILY_QUERIES}")
                return None

            self.logger.info(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å: {query[:50]}...")

            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ Perplexity
            response = await self.automation.execute_query(query)
            if not response:
                self.stats['errors_today'] += 1
                return None

            self.stats['queries_today'] += 1

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
            post = await self.automation.process_response(response, query)
            if not post:
                self.stats['errors_today'] += 1
                return None

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            self.db.save_news_post(post)
            self.stats['posts_created_today'] += 1

            self.logger.info(f"üìù –°–æ–∑–¥–∞–Ω –ø–æ—Å—Ç: {post.title} (–≤–∞–∂–Ω–æ—Å—Ç—å: {post.importance})")
            return post

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞: {e}")
            self.stats['errors_today'] += 1
            return None

    async def publish_post(self, post: 'NewsPost') -> bool:
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ Telegram –∫–∞–Ω–∞–ª—ã"""

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏
            if post.importance < Config.MIN_IMPORTANCE_TO_PUBLISH:
                self.logger.debug(f"‚è≠Ô∏è –ü–æ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω (–≤–∞–∂–Ω–æ—Å—Ç—å {post.importance} < {Config.MIN_IMPORTANCE_TO_PUBLISH})")
                return False

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª—ã
            success = await self.telegram.publish_post(post)

            if success:
                self.stats['posts_published_today'] += 1
                self.db.update_post_status(post.id, 'published')
                self.logger.info(f"üì§ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {post.title}")
                return True
            else:
                self.stats['errors_today'] += 1
                return False

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            self.stats['errors_today'] += 1
            return False

    async def run_manual_session(self, session_name: str = "manual") -> Dict[str, int]:
        """–ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–µ—Å—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"""

        self.logger.info(f"üéØ –ó–∞–ø—É—Å–∫ —Ä—É—á–Ω–æ–π —Å–µ—Å—Å–∏–∏: {session_name}")

        results = {
            'posts_created': 0,
            'posts_published': 0,
            'queries_used': 0,
            'errors': 0
        }

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–µ—Å—Å–∏–∏
        queries = Config.get_session_queries(session_name)

        for query in queries[:Config.MAX_QUERIES_PER_SESSION]:
            try:
                # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
                post = await self.create_news_post_from_query(query)
                if post:
                    results['posts_created'] += 1
                    results['queries_used'] += 1

                    # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –µ—Å–ª–∏ –≤–∞–∂–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è
                    if post.importance >= Config.MIN_IMPORTANCE_TO_PUBLISH:
                        if await self.publish_post(post):
                            results['posts_published'] += 1

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                await asyncio.sleep(Config.QUERY_DELAY_SECONDS)

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ä—É—á–Ω–æ–π —Å–µ—Å—Å–∏–∏: {e}")
                results['errors'] += 1

        self.logger.info(f"‚úÖ –†—É—á–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {results}")
        return results

    async def run_scheduled_sessions(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π"""

        self.logger.info("üìÖ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å–µ—Å—Å–∏–π")

        while self.running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                await self.scheduler.check_and_run_sessions()

                # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ

    async def update_daily_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

        today = datetime.now().date()
        stats_data = {
            'date': today.isoformat(),
            'queries_used': self.stats['queries_today'],
            'posts_created': self.stats['posts_created_today'],
            'posts_published': self.stats['posts_published_today'],
            'errors_count': self.stats['errors_today']
        }

        self.db.update_daily_stats(stats_data)

        # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤ –ø–æ–ª–Ω–æ—á—å
        now = datetime.now()
        if now.hour == 0 and now.minute < 2:
            self.reset_daily_counters()

    def reset_daily_counters(self):
        """–°–±—Ä–æ—Å –¥–Ω–µ–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤"""
        self.stats.update({
            'queries_today': 0,
            'posts_created_today': 0,
            'posts_published_today': 0,
            'errors_today': 0
        })
        self.logger.info("üîÑ –î–Ω–µ–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ —Å–±—Ä–æ—à–µ–Ω—ã")

    def get_system_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""

        uptime = datetime.now() - self.stats['start_time']

        return {
            'status': 'running' if self.running else 'stopped',
            'uptime_seconds': int(uptime.total_seconds()),
            'uptime_human': str(uptime).split('.')[0],
            'stats': self.stats,
            'config': {
                'max_daily_queries': Config.MAX_DAILY_QUERIES,
                'min_importance': Config.MIN_IMPORTANCE_TO_PUBLISH,
                'channels_count': len(Config.TELEGRAM_CHANNELS)
            }
        }

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —Å–∏—Å—Ç–µ–º—ã"""

        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π")
        self.running = True

        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
            health = await self.health_check()
            if not all(health.values()):
                self.logger.warning("‚ö†Ô∏è –ù–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≥–æ—Ç–æ–≤—ã –∫ —Ä–∞–±–æ—Ç–µ")
                for component, status in health.items():
                    if not status:
                        self.logger.error(f"‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç '{component}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            await self.automation.initialize()
            await self.telegram.initialize()

            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            tasks = [
                asyncio.create_task(self.run_scheduled_sessions()),
                asyncio.create_task(self.periodic_health_check()),
                asyncio.create_task(self.periodic_stats_update())
            ]

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")

            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            self.logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
        finally:
            await self.shutdown()

    async def periodic_health_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""

        while self.running:
            try:
                await asyncio.sleep(Config.HEALTH_CHECK_INTERVAL)
                await self.health_check()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")

    async def periodic_stats_update(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

        while self.running:
            try:
                await asyncio.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                await self.update_daily_stats()
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""

        self.logger.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã...")

        try:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            if hasattr(self.automation, 'cleanup'):
                await self.automation.cleanup()

            if hasattr(self.telegram, 'cleanup'):
                await self.telegram.cleanup()

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            await self.update_daily_stats()

            # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            if hasattr(self.db, 'close'):
                self.db.close()

            self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: {e}")

# –ö–æ–º–∞–Ω–¥—ã CLI
async def run_single_query(query: str):
    """CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""

    system = NewsAutomationSystem()
    post = await system.create_news_post_from_query(query)

    if post:
        print(f"‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω:")
        print(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {post.title}")
        print(f"–í–∞–∂–Ω–æ—Å—Ç—å: {post.importance}/10")
        print(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {post.category}")
        print(f"–ö–∞–Ω–∞–ª—ã: {', '.join(post.telegram_channels)}")

        if post.importance >= Config.MIN_IMPORTANCE_TO_PUBLISH:
            if await system.publish_post(post):
                print("üì§ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ Telegram")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram")
        else:
            print(f"‚è≠Ô∏è –ü–æ—Å—Ç –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω (–≤–∞–∂–Ω–æ—Å—Ç—å < {Config.MIN_IMPORTANCE_TO_PUBLISH})")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç")

    await system.shutdown()

async def run_manual_session_cmd(session_name: str = "manual"):
    """CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä—É—á–Ω–æ–π —Å–µ—Å—Å–∏–∏"""

    system = NewsAutomationSystem()
    results = await system.run_manual_session(session_name)

    print(f"‚úÖ –°–µ—Å—Å–∏—è '{session_name}' –∑–∞–≤–µ—Ä—à–µ–Ω–∞:")
    print(f"–°–æ–∑–¥–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {results['posts_created']}")
    print(f"–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {results['posts_published']}")
    print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {results['queries_used']}")

    if results['errors'] > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")

    await system.shutdown()

async def show_system_status():
    """CLI –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""

    system = NewsAutomationSystem()
    status = system.get_system_status()

    print(f"üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status['status']}")
    print(f"‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {status['uptime_human']}")
    print(f"üìà –ó–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {status['stats']['queries_today']}")
    print(f"üìù –ü–æ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {status['stats']['posts_created_today']}")
    print(f"üì§ –ü–æ—Å—Ç–æ–≤ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ: {status['stats']['posts_published_today']}")

    if status['stats']['errors_today'] > 0:
        print(f"‚ùå –û—à–∏–±–æ–∫ —Å–µ–≥–æ–¥–Ω—è: {status['stats']['errors_today']}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_name in ['data', 'logs', 'temp']:
        Path(dir_name).mkdir(exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not Config.validate_config():
        logger.error("‚ùå –û—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)

    # CLI –∫–æ–º–∞–Ω–¥—ã
    if len(sys.argv) > 1:
        command = sys.argv[1]

        if command == "query" and len(sys.argv) > 2:
            query = " ".join(sys.argv[2:])
            asyncio.run(run_single_query(query))

        elif command == "session" and len(sys.argv) > 2:
            session_name = sys.argv[2]
            asyncio.run(run_manual_session_cmd(session_name))

        elif command == "status":
            asyncio.run(show_system_status())

        elif command == "health":
            async def check_health():
                system = NewsAutomationSystem()
                health = await system.health_check()
                for component, status in health.items():
                    emoji = "‚úÖ" if status else "‚ùå"
                    print(f"{emoji} {component}: {'OK' if status else 'FAIL'}")

            asyncio.run(check_health())

        else:
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  python src/main.py query '–≤–∞—à –∑–∞–ø—Ä–æ—Å'")
            print("  python src/main.py session morning|afternoon|evening|night")
            print("  python src/main.py status")
            print("  python src/main.py health")
            sys.exit(1)
    else:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
        try:
            system = NewsAutomationSystem()
            asyncio.run(system.start())
        except KeyboardInterrupt:
            logger.info("üëã –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            sys.exit(1)

if __name__ == "__main__":
    main()
